<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    
    <!-- 如果控制器不在一个包里面，则可以通过配置只扫描Controller注解 -->
    <context:component-scan base-package="com.sport.controller" use-default-filters="false">
    	<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
    
    <!-- 定义视图解析器，跳转到指定视图路径 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
    	p:viewClass="org.springframework.web.servlet.view.JstlView"
    	p:prefix="/WEB-INF/jsp/"
    	p:suffix=".jsp" />
    
    <!-- 
    	配置解析freemarker模板的环境
    	freemarkerSettings：配置多个freemarker的自定义属性
    		classic_compatible属性必须配置为true，否则当模板文件遇到null值时抛出异常，配置后遇到null值返回空字符串
     -->
    <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"
    	p:templateLoaderPaths="/WEB-INF/templates/"
    	p:defaultEncoding="UTF-8">
    	<property name="freemarkerSettings">
    		<props>
                <!-- freemarker默认当变量不存在或为null时会报错，增加以下配置可以让界面不报错-->
    			<prop key="classic_compatible">true</prop>
    			<prop key="locale">zh_CN</prop>
				<prop key="number_format">0.##</prop>
    		</props>
    	</property>
    </bean>
	
     <!-- 
    	定义freemarker模板的视图解析器，freemarker文件的后缀为ftl
    	order：代表视图解析器的优先级，默认InternalResourceViewResolver视图解析器的优先级最低。
     -->
    <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"
    	p:order="5"
    	p:suffix=".ftl"
    	p:contentType="text/html;charset=UTF-8" />

    <!--
    	spring3提供的静态资源处理方式二：
    	通过配置mvc:resources元素让springmvc框架自己处理静态资源文件，说明：
    	1、location：指定资源文件的路径，多个路径以英文逗号隔开。对于多个路径下当存在相同的资源文件的处理方式是按配置
    	       的路径查找，找到即返回。当配置根路径“/”时并不能访问WEB-INF和META-INF目录下的文件，除非显示指定该文件夹。
    	2、cache-period：指定客户端缓存静态资源的有效时间，单位为秒。以下配置代表缓存一年
    	3、传统的web容器只能将静态资源文件放到WEBROOT目录，而通过这种方式允许将静态资源文件放在任何位置（如WEB-INF目录、类路径目录）。
    	4、访问静态资源时需要加上mapping属性映射的路径名，此处是“resources”
     -->
	<mvc:resources mapping="/resources/**" 	location="/" cache-period="1" />
    
    <!-- 自定义springmvc的异常处理 -->
    <bean class="com.sport.common.exception.ExceptionResolver"></bean>
    
    <!-- springmvc配置拦截器处理 -->
    <mvc:interceptors>
    	<mvc:interceptor>
    		<mvc:mapping path="/**"   />
    		<bean class="com.sport.common.intercept.GlobalInterceptor"></bean>
    	</mvc:interceptor>
    </mvc:interceptors>
    
    <!-- 
    	该配置会创建并注册一个默认的DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter实例
    	如果存在自定义的处理器会覆盖默认的。
    	也会注册一个默认的ConversionService实例，即FormattingConversionServiceFactoryBean，
    	可以通过自定义的ConversionService覆盖默认配置。
     -->
    <!-- 开启注解驱动模式，比如Controller注解等 -->
    <mvc:annotation-driven />
    <!--<mvc:annotation-driven conversion-service="conversionService" />-->
    
    <!-- 配置类型转换器 -->
    <!--<bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
    	<property name="converters">
    		<set>
    			<bean class="learn.frame.common.converter.DateConverter"></bean>
    		</set>
    	</property>
    </bean>-->
    
</beans>