<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
    http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1">

    <display-name>sport</display-name>

    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <!-- 指定配置文件的位置，多个配置文件用逗号或空格隔开，默认加载WEB-INF路径下的applicationContext.xml文件 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-mybatis.xml</param-value>
    </context-param>

    <!-- spring声明web容器监听器  -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 防止Spring内存溢出监听器 -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>

    <servlet>
        <servlet-name>dispatch</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <!--
                显示指定加载springmvc的配置文件路径，默认加载WEB-INF目录下的“servlet名称-servlet.xml”
                （比如这里加载“dispatch-servlet.xml”配置文件）。
             -->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatch</servlet-name>
        <!--
            “/*”配置代表拦截所有请求，包括对静态资源（比如css、图片文件等）的请求
            这种配置需要在springmvc框架配置怎样处理静态资源文件，否则无法访问静态资源文件。
            默认静态资源文件由web容器（比如Tomcat）提供的默认servlet处理。
        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- 编码处理过滤器 -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>
    <!--
        WebAppRootListener监听器的作用仅是为了方便获得项目的根路径值。说明如下：
        1、配置该监听器可以在代码中通过System.getProperty(key)方法获取根路径值
        2、该监听器的作用只是通过System.setProperty()方法设置一个属性值。其中key为这里的配置参数webAppRootKey对应
               的值，value为项目的根路径，即通过代码servletContext.getRealPath("/")获取的值
        3、配置参数webAppRootKey是固定的，不能修改名称。
        4、如果在通过方法System.setProperty()设置属性时存在相同的key则抛出异常
     -->
    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>project_root</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.util.WebAppRootListener</listener-class>
    </listener>


    <!-- 出错页面定义 -->
    <error-page>
        <error-code>400</error-code>
        <location>/error/400</location>
    </error-page>
    <error-page>
        <error-code>403</error-code>
        <location>/error/403</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/error/404</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/error/500</location>
    </error-page>
</web-app>